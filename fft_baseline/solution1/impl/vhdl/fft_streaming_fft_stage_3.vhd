-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_streaming_fft_stage_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce1 : OUT STD_LOGIC;
    X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce1 : OUT STD_LOGIC;
    X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Out_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_ce0 : OUT STD_LOGIC;
    Out_R_we0 : OUT STD_LOGIC;
    Out_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_ce1 : OUT STD_LOGIC;
    Out_R_we1 : OUT STD_LOGIC;
    Out_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_ce0 : OUT STD_LOGIC;
    Out_I_we0 : OUT STD_LOGIC;
    Out_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_ce1 : OUT STD_LOGIC;
    Out_I_we1 : OUT STD_LOGIC;
    Out_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_streaming_fft_stage_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln43_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal W_real10_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real10_ce0 : STD_LOGIC;
    signal W_real10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag2_ce0 : STD_LOGIC;
    signal W_imag2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_350_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_reg_431 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_reg_431_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_reg_431_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_reg_431_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln54_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_reg_436_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_496 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_496_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_496_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_496_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_496_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_load_7_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_load_7_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub7_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add7_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal t_fu_58 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_t_load : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln43_13_fu_338_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_6 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_66 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln43_fu_283_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_265_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln46_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_6_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_19_fu_312_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_316_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_269_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln43_12_fu_324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln43_fu_298_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln47_fu_346_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln53_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_196_ce : STD_LOGIC;
    signal grp_fu_200_ce : STD_LOGIC;
    signal grp_fu_204_ce : STD_LOGIC;
    signal grp_fu_208_ce : STD_LOGIC;
    signal grp_fu_212_ce : STD_LOGIC;
    signal grp_fu_216_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_226_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal grp_fu_238_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_272 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_streaming_fsub_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_streaming_fadd_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_streaming_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_streaming_fft_stage_1_W_real_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_streaming_fft_stage_1_W_imag_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_streaming_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    W_real10_U : component fft_streaming_fft_stage_1_W_real_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_real10_address0,
        ce0 => W_real10_ce0,
        q0 => W_real10_q0);

    W_imag2_U : component fft_streaming_fft_stage_1_W_imag_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_imag2_address0,
        ce0 => W_imag2_ce0,
        q0 => W_imag2_q0);

    fsub_32ns_32ns_32_3_full_dsp_1_U50 : component fft_streaming_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul1_reg_476,
        din1 => mul2_reg_481,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U51 : component fft_streaming_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_486,
        din1 => mul3_reg_491,
        ce => grp_fu_200_ce,
        dout => grp_fu_200_p2);

    fsub_32ns_32ns_32_3_full_dsp_1_U52 : component fft_streaming_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_load_7_reg_524,
        din1 => temp_R_reg_512,
        ce => grp_fu_204_ce,
        dout => grp_fu_204_p2);

    fsub_32ns_32ns_32_3_full_dsp_1_U53 : component fft_streaming_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_load_7_reg_530,
        din1 => temp_I_reg_518,
        ce => grp_fu_208_ce,
        dout => grp_fu_208_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U54 : component fft_streaming_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_load_7_reg_524,
        din1 => temp_R_reg_512,
        ce => grp_fu_212_ce,
        dout => grp_fu_212_p2);

    fadd_32ns_32ns_32_3_full_dsp_1_U55 : component fft_streaming_fadd_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_load_7_reg_530,
        din1 => temp_I_reg_518,
        ce => grp_fu_216_ce,
        dout => grp_fu_216_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U56 : component fft_streaming_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_q1,
        din1 => W_real10_q0,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U57 : component fft_streaming_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_q1,
        din1 => W_imag2_q0,
        ce => grp_fu_226_ce,
        dout => grp_fu_226_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U58 : component fft_streaming_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_I_q1,
        din1 => W_real10_q0,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U59 : component fft_streaming_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => X_R_q1,
        din1 => W_imag2_q0,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p2);

    flow_control_loop_delay_pipe_U : component fft_streaming_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_272)) then
                if ((icmp_ln43_fu_277_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_66 <= add_ln43_fu_283_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_66 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_272)) then
                if ((icmp_ln43_fu_277_p2 = ap_const_lv1_0)) then 
                    j_fu_62 <= select_ln43_13_fu_338_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    t_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_272)) then
                if ((icmp_ln43_fu_277_p2 = ap_const_lv1_0)) then 
                    t_fu_58 <= add_ln46_fu_370_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_58 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                X_I_load_7_reg_530 <= X_I_q0;
                X_R_load_7_reg_524 <= X_R_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add7_reg_551 <= grp_fu_216_p2;
                add_reg_546 <= grp_fu_212_p2;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                mul1_reg_476 <= grp_fu_220_p2;
                mul2_reg_481 <= grp_fu_226_p2;
                mul3_reg_491 <= grp_fu_238_p2;
                mul_reg_486 <= grp_fu_232_p2;
                or_ln_reg_431_pp0_iter2_reg <= or_ln_reg_431_pp0_iter1_reg;
                or_ln_reg_431_pp0_iter3_reg <= or_ln_reg_431_pp0_iter2_reg;
                sub7_reg_541 <= grp_fu_208_p2;
                sub_reg_536 <= grp_fu_204_p2;
                temp_I_reg_518 <= grp_fu_200_p2;
                temp_R_reg_512 <= grp_fu_196_p2;
                    zext_ln51_reg_496(9 downto 0) <= zext_ln51_fu_391_p1(9 downto 0);
                    zext_ln51_reg_496_pp0_iter5_reg(9 downto 0) <= zext_ln51_reg_496(9 downto 0);
                    zext_ln51_reg_496_pp0_iter6_reg(9 downto 0) <= zext_ln51_reg_496_pp0_iter5_reg(9 downto 0);
                    zext_ln51_reg_496_pp0_iter7_reg(9 downto 0) <= zext_ln51_reg_496_pp0_iter6_reg(9 downto 0);
                    zext_ln51_reg_496_pp0_iter8_reg(9 downto 0) <= zext_ln51_reg_496_pp0_iter7_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter2_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter1_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter3_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter2_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter4_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter3_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter5_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter4_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter6_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter5_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter7_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter6_reg(9 downto 0);
                    zext_ln54_reg_436_pp0_iter8_reg(9 downto 0) <= zext_ln54_reg_436_pp0_iter7_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                or_ln_reg_431_pp0_iter1_reg <= or_ln_reg_431;
                    zext_ln54_reg_436_pp0_iter1_reg(9 downto 0) <= zext_ln54_reg_436(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_277_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln_reg_431 <= or_ln_fu_350_p3;
                    zext_ln54_reg_436(9 downto 0) <= zext_ln54_fu_364_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln54_reg_436(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln54_reg_436_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln51_reg_496(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln51_reg_496_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln51_reg_496_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln51_reg_496_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln51_reg_496_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Out_I_address0 <= zext_ln51_reg_496_pp0_iter8_reg(10 - 1 downto 0);
    Out_I_address1 <= zext_ln54_reg_436_pp0_iter8_reg(10 - 1 downto 0);

    Out_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_I_ce0 <= ap_const_logic_1;
        else 
            Out_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_I_ce1 <= ap_const_logic_1;
        else 
            Out_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_d0 <= add7_reg_551;
    Out_I_d1 <= sub7_reg_541;

    Out_I_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_I_we0 <= ap_const_logic_1;
        else 
            Out_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_we1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_I_we1 <= ap_const_logic_1;
        else 
            Out_I_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_address0 <= zext_ln51_reg_496_pp0_iter8_reg(10 - 1 downto 0);
    Out_R_address1 <= zext_ln54_reg_436_pp0_iter8_reg(10 - 1 downto 0);

    Out_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_R_ce0 <= ap_const_logic_1;
        else 
            Out_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_R_ce1 <= ap_const_logic_1;
        else 
            Out_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_d0 <= add_reg_546;
    Out_R_d1 <= sub_reg_536;

    Out_R_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_R_we0 <= ap_const_logic_1;
        else 
            Out_R_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_we1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Out_R_we1 <= ap_const_logic_1;
        else 
            Out_R_we1 <= ap_const_logic_0;
        end if; 
    end process;

    W_imag2_address0 <= zext_ln43_fu_332_p1(9 - 1 downto 0);

    W_imag2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag2_ce0 <= ap_const_logic_1;
        else 
            W_imag2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_real10_address0 <= zext_ln43_fu_332_p1(9 - 1 downto 0);

    W_real10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real10_ce0 <= ap_const_logic_1;
        else 
            W_real10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_address0 <= zext_ln51_fu_391_p1(10 - 1 downto 0);
    X_I_address1 <= zext_ln54_fu_364_p1(10 - 1 downto 0);

    X_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            X_I_ce0 <= ap_const_logic_1;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_ce1 <= ap_const_logic_1;
        else 
            X_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_address0 <= zext_ln51_fu_391_p1(10 - 1 downto 0);
    X_R_address1 <= zext_ln54_fu_364_p1(10 - 1 downto 0);

    X_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            X_R_ce0 <= ap_const_logic_1;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_ce1 <= ap_const_logic_1;
        else 
            X_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln43_6_fu_306_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_6) + unsigned(ap_const_lv4_1));
    add_ln43_fu_283_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln46_fu_370_p2 <= std_logic_vector(unsigned(select_ln43_fu_298_p3) + unsigned(ap_const_lv7_1));
    add_ln53_fu_358_p2 <= std_logic_vector(unsigned(or_ln_fu_350_p3) + unsigned(ap_const_lv10_8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_272_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_272 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln43_fu_277_p2, ap_start_int)
    begin
        if (((icmp_ln43_fu_277_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_66, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_j_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_62, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_6 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_6 <= j_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_t_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, t_fu_58, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_t_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_t_load <= t_fu_58;
        end if; 
    end process;

    empty_19_fu_312_p1 <= add_ln43_6_fu_306_p2(3 - 1 downto 0);
    empty_fu_265_p1 <= ap_sig_allocacmp_j_6(3 - 1 downto 0);

    grp_fu_196_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_196_ce <= ap_const_logic_1;
        else 
            grp_fu_196_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_200_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_200_ce <= ap_const_logic_1;
        else 
            grp_fu_200_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_204_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_204_ce <= ap_const_logic_1;
        else 
            grp_fu_204_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_208_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_208_ce <= ap_const_logic_1;
        else 
            grp_fu_208_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_212_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_212_ce <= ap_const_logic_1;
        else 
            grp_fu_212_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_216_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_216_ce <= ap_const_logic_1;
        else 
            grp_fu_216_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_226_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_226_ce <= ap_const_logic_1;
        else 
            grp_fu_226_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_238_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_238_ce <= ap_const_logic_1;
        else 
            grp_fu_238_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln43_fu_277_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_200) else "0";
    icmp_ln46_fu_292_p2 <= "1" when (ap_sig_allocacmp_t_load = ap_const_lv7_40) else "0";
    or_ln_fu_350_p3 <= (trunc_ln47_fu_346_p1 & select_ln43_13_fu_338_p3);
    p_mid1_fu_316_p3 <= (empty_19_fu_312_p1 & ap_const_lv6_0);
    select_ln43_12_fu_324_p3 <= 
        p_mid1_fu_316_p3 when (icmp_ln46_fu_292_p2(0) = '1') else 
        tmp_s_fu_269_p3;
    select_ln43_13_fu_338_p3 <= 
        add_ln43_6_fu_306_p2 when (icmp_ln46_fu_292_p2(0) = '1') else 
        ap_sig_allocacmp_j_6;
    select_ln43_fu_298_p3 <= 
        ap_const_lv7_0 when (icmp_ln46_fu_292_p2(0) = '1') else 
        ap_sig_allocacmp_t_load;
    tmp_s_fu_269_p3 <= (empty_fu_265_p1 & ap_const_lv6_0);
    trunc_ln47_fu_346_p1 <= select_ln43_fu_298_p3(6 - 1 downto 0);
    zext_ln43_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_12_fu_324_p3),64));
    zext_ln51_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_431_pp0_iter3_reg),64));
    zext_ln54_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_fu_358_p2),64));
end behav;
